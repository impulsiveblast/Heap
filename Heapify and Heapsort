#include<bits/stdc++.h>
using namespace std;

class heap{
    
    public:
    int arr[1000];
    int size;
    
    heap(){
        size=0;
        arr[size]=-1;
    }
    
    public:
      void insert(int a)
     {
          size=size+1;
          int index=size;
          arr[index]=a;
          
          while(index>1)
          {
              int parent=index/2;
              
              if(arr[parent]<arr[index])
              {
                  swap(arr[parent],arr[index]);
                  
                  index=parent;
                  
              }
              else
              {
                  break;                //o(logn) is the time comlexity

              }
              
          }
          
     }
          
          void print()
          {
              cout<<endl;
              
              cout<<endl;
              for(int i=1;i<=size;i++)
              {
                  cout<<arr[i]<<endl;
              }
          }
          
          
        void del(){
            
            if(size>=1)
          {
              arr[1]=arr[size];
            size--;
            int i=1;
            
            int leftindex=2*i;
            
            int rightindex=2*i+1;
            
            while(i<size)
            {
                leftindex=2*i;
            
                rightindex=2*i+1;
            
                if(arr[i]<arr[leftindex] && leftindex<size) //not acessing the index at deleted element
                {
                    swap(arr[i],arr[leftindex]);
                    i=leftindex;
                }
                else if(arr[i]<arr[rightindex] && rightindex<size)  //not acessing the index at deleted element
                {
                    swap(arr[i],arr[rightindex]);
                    i=rightindex;
                }
                else
                {
                    break;
                }
            }
          }
          else
          {
              cout<<"Heap is already empty!"<<endl;
          }
        }
     
     
     
     
     
};


void heapify(vector<int> &v,int size,int i)  //max heap
{
    int largest=i;
    
    int left=2*i;
    int right=2*i+1;
    
    
    if(left<=size && v[largest]<v[left])
    {
        swap(v[largest],v[left]);
        i=left;
    }
    else if(right<=size &&  v[largest]<v[right])
    {
        
        swap(v[largest],v[right]);
       i=right;
    }
    
    
    if(largest!=i)
    {
        heapify(v,size,i);
    }
  
  
}


void heapsort(vector<int> &v,int n)
{
     int size=n;
     
     while(size>1)
     {
         swap(v[1],v[size]);
         size--;
         heapify(v,size,1);
     }
}


int main()
{
   
//   heap h1;
   
//   h1.insert(5);
   
//   h1.insert(2);
   
//   h1.insert(10);
   
//   h1.insert(1);
   
//   h1.print();
   
//   h1.insert(6);
   
//   h1.del();
   
   
//   h1.print();
   
//   h1.del();
   
//   h1.del();
   
   
//   h1.print();
   
   
   int x;
   int n;
   
   cin>>n;
   
   
   vector<int> v;
   
   v.push_back(-1);
   
   for(int i=0;i<n;i++)
   {
       cin>>x;
       v.push_back(x);
   }
   
   
   heapsort(v,v.size()-1);
   
   for(int i=1;i<=n;i++)
   {
       cout<<v[i]<<" ";
   }
   
   return 0;
   
}
